/* eslint-disable */
const Utils = require('../../src/Utils.js');

const csu = new Utils();

const ERROR_FAILED_TO_NORMALIZE_JSON = /Failed to normalize JSON/;
const ERROR_TYPE_MISMATCH = /Type mismatch/;
const ERROR_DATE = /A string representation of the date is expected/;
const ERROR_DATE_PATTERN = /date does not match the pattern/;
const ERROR_EMAIL = /representation of the email is expected/;
const ERROR_EMAIL_PATTERN = /email does not match the pattern/;
const ERROR_CONVERT_TO_NUMBER = /Failed to convert string to number/;
const ERROR_TYPE_TO_NUMBER = /expected js type is «number» or a string/;
const ERROR_BOOLEAN_STR = /Expected string representation of «true»/;
const ERROR_BOOLEAN_NUM = /expected type is «boolean» or «number» \(-1\|1\|0\)/;
const ERROR_BOOLEAN_NUM2 = /numeric representation of -1\|1\|0 is expected/;

const fromIndex = 0;

describe('Utils: Validation and normalization of values depending on the type should work properly', () => {
  describe('Method validator() of different types...', () => {
    const schemaItemStub = { path: 'stab.path' };
    const cases = [
      ['section', [], /Cannot set a value for a 'section'/],

      ['json', null, null],
      ['json', 'foostring', 'foostring'],
      ['json', '{"a": 1}', { a: 1 }],
      ['json', '{hhh "a": 1}', ERROR_FAILED_TO_NORMALIZE_JSON],
      ['json', '{a: 1}', { a: 1 }],
      ['json', { a: 1 }, { a: 1 }],
      ['json', [1, 2, 3], [1, 2, 3]],
      ['json', 234, 234],

      ['array', null, null],
      ['array', 123, ERROR_TYPE_MISMATCH],
      ['array', '123', ERROR_TYPE_MISMATCH],
      ['array', true, ERROR_TYPE_MISMATCH],
      ['array', { a: 1 }, ERROR_TYPE_MISMATCH],
      ['array', [1, 2, 3], [1, 2, 3]],

      ['string', null, null],
      ['string', 'foostring', 'foostring'],
      ['string', { a: 1 }, '{"a":1}'],
      ['string', [1, 2, 3], '[1,2,3]'],
      ['string', 123, '123'],
      ['string', 123.5678, '123.5678'],
      ['string', true, 'true'],
      ['string', false, 'false'],

      ['text', null, null],
      ['text', 'foostring', 'foostring'],
      ['text', { a: 1 }, '{"a":1}'],
      ['text', [1, 2, 3], '[1,2,3]'],
      ['text', 123, '123'],
      ['text', 123.5678, '123.5678'],
      ['text', true, 'true'],
      ['text', false, 'false'],

      ['date', null, null],
      ['date', '01/01/2012', ERROR_DATE_PATTERN],
      ['date', '01-01-2012', ERROR_DATE_PATTERN],
      ['date', '2012-30-12', ERROR_DATE_PATTERN],
      ['date', '2012-12-30', '2012-12-30'],
      ['date', '2012-12-30T14:40:00', '2012-12-30'],
      ['date', 123, ERROR_DATE],

      ['time', null, null],
      ['time', '12:20:01', '12:20:01.000'],
      ['time', '12:20:01.789', '12:20:01.789'],
      ['time', '2012-30-12', ERROR_DATE_PATTERN],
      ['time', '10:00', ERROR_DATE_PATTERN],
      ['time', '2012-12-30T14:40:00', ERROR_DATE_PATTERN],
      ['time', 123, ERROR_DATE_PATTERN],

      ['datetime', null, null],
      ['datetime', '2012-12-30T07:08:14', '2012-12-30T07:08:14.000'],
      ['datetime', '2012-12-30 07:08:14', '2012-12-30T07:08:14.000'],
      ['datetime', '10:00', ERROR_DATE_PATTERN],
      ['datetime', '12:20:01', ERROR_DATE_PATTERN],
      ['datetime', '12:20:01.789', ERROR_DATE_PATTERN],
      ['datetime', 123, ERROR_DATE],

      ['email', null, null],
      ['email', 123, ERROR_EMAIL],
      ['email', { a: 1 }, ERROR_EMAIL],
      ['email', [1], ERROR_EMAIL],
      ['email', 'dddddd', ERROR_EMAIL_PATTERN],
      ['email', '@bar.baz', ERROR_EMAIL_PATTERN],
      ['email', 'foo@bar.baz', 'foo@bar.baz'],

      ['number', null, null],
      ['number', 123, 123],
      ['number', 123.567, 123.567],
      ['number', '123', 123],
      ['number', '123.456', 123.456],
      ['number', '123,456', 123],
      ['number', '123ttttt', 123],
      ['number', 'ttttt', ERROR_CONVERT_TO_NUMBER],
      ['number', { a: 1 }, ERROR_TYPE_TO_NUMBER],
      ['number', true, ERROR_TYPE_TO_NUMBER],
      ['number', false, ERROR_TYPE_TO_NUMBER],
      ['number', [12345], ERROR_TYPE_TO_NUMBER],
      ['number', 1234567890123456789012345678901234567890, 1.2345678901234568e+39],
      ['number', -1234567890123456789012345678901234567890, -1.2345678901234568e+39],
      ['number', 123456789012345678901234567890123456789012345678901234567890, 1.2345678901234568e+59],
      ['number', -12345678901234567890123456789012345678901234567890123456780, -1.2345678901234568e+58],
      ['number', '123456789012345678901234567890123456789012345678901234567890', 1.2345678901234568e+59],
      ['number', '-12345678901234567890123456789012345678901234567890123456780', -1.2345678901234568e+58],
      ['number', 12345678901234.5678901234567890123456789012345678901234567890, 12345678901234.568],
      ['number', -12345678901234.567890123456789012345678901234567890123456780, -12345678901234.568],
      ['number', 123456789012345678901234.567890123456789012345678901234567890, 1.2345678901234569e+23],
      ['number', -123456789012345678901234.56789012345678901234567890123456780, -1.2345678901234569e+23],
      ['number', 0, 0],
      ['number', -0, 0],

      ['int', null, null],
      ['int', 123, 123],
      ['int', 123.567, 124],
      ['int', '123', 123],
      ['int', '123.456', 123],
      ['int', '123,456', ERROR_CONVERT_TO_NUMBER],
      ['int', '123ttttt', ERROR_CONVERT_TO_NUMBER],
      ['int', 'ttttt', ERROR_CONVERT_TO_NUMBER],
      ['int', { a: 1 }, ERROR_TYPE_TO_NUMBER],
      ['int', true, ERROR_TYPE_TO_NUMBER],
      ['int', false, ERROR_TYPE_TO_NUMBER],
      ['int', [12345], ERROR_TYPE_TO_NUMBER],
      ['int', 1234567890123456789012345678901234567890, 2147483647],
      ['int', -1234567890123456789012345678901234567890, -2147483648],
      ['int', 123456789012345678901234567890123456789012345678901234567890, 2147483647],
      ['int', -12345678901234567890123456789012345678901234567890123456780, -2147483648],
      ['int', '123456789012345678901234567890123456789012345678901234567890', 2147483647],
      ['int', '-12345678901234567890123456789012345678901234567890123456780', -2147483648],
      ['int', 12345678901234.5678901234567890123456789012345678901234567890, 2147483647],
      ['int', -12345678901234.567890123456789012345678901234567890123456780, -2147483648],
      ['int', 123456789012345678901234.567890123456789012345678901234567890, 2147483647],
      ['int', -123456789012345678901234.56789012345678901234567890123456780, -2147483648],
      ['int', 12345678.9012345678901234567890123456789012345678901234567890, 12345679],
      ['int', -12345678.901234567890123456789012345678901234567890123456780, -12345679],
      ['int', 2147483647, 2147483647],
      ['int', -2147483648, -2147483648],
      ['int', 2147483646, 2147483646],
      ['int', -2147483647, -2147483647],
      ['int', 2147483649, 2147483647],
      ['int', -2147483649, -2147483648],
      ['int', 1.21, 1],
      ['int', -1.21, -1],
      ['int', 1.50, 2],
      ['int', -1.50, -1],
      ['int', 1.51, 2],
      ['int', -1.51, -2],
      ['int', '1.51', 2],
      ['int', '-1.51', -2],
      ['int', 0.0001, 0],
      ['int', -0.0001, 0],
      ['int', 0, 0],
      ['int', -0, 0],

      ['long', null, null],
      ['long', 123, 123],
      ['long', 123.567, 124],
      ['long', '123', 123],
      ['long', '123.456', 123],
      ['long', '123,456', ERROR_CONVERT_TO_NUMBER],
      ['long', '123ttttt', ERROR_CONVERT_TO_NUMBER],
      ['long', 'ttttt', ERROR_CONVERT_TO_NUMBER],
      ['long', { a: 1 }, ERROR_TYPE_TO_NUMBER],
      ['long', true, ERROR_TYPE_TO_NUMBER],
      ['long', false, ERROR_TYPE_TO_NUMBER],
      ['long', [12345], ERROR_TYPE_TO_NUMBER],
      ['long', 1234567890123456789012345678901234567890, 9223372036854776000],
      ['long', -1234567890123456789012345678901234567890, -9223372036854775808],
      ['long', 123456789012345678901234567890123456789012345678901234567890, 9223372036854776000],
      ['long', -12345678901234567890123456789012345678901234567890123456780, -9223372036854775808],
      ['long', '123456789012345678901234567890123456789012345678901234567890', 9223372036854776000],
      ['long', '-12345678901234567890123456789012345678901234567890123456780', -9223372036854775808],
      ['long', 123456789012345678901234.567890123456789012345678901234567890, 9223372036854776000],
      ['long', -12345678901234567890123.456789012345678901234567890123456780, -9223372036854775808],
      ['long', 123456789012345678901234.567890123456789012345678901234567890, 9223372036854776000],
      ['long', -123456789012345678901234.56789012345678901234567890123456780, -9223372036854775808],
      ['long', 12345678.9012345678901234567890123456789012345678901234567890, 12345679],
      ['long', -12345678.901234567890123456789012345678901234567890123456780, -12345679],

      ['long', 9223372036854775807, 9223372036854776000],
      ['long', 9223372036854775000, 9223372036854775000],
      ['long', 9223372036854776000, 9223372036854776000],
      ['long', 9223372036854774900, 9223372036854775000],
      ['long', -9223372036854775808, -9223372036854775808],
      ['long', -9223372036854775809, -9223372036854775808],
      ['long', 1.21, 1],
      ['long', -1.21, -1],
      ['long', 1.50, 2],
      ['long', -1.50, -1],
      ['long', 1.51, 2],
      ['long', -1.51, -2],
      ['long', '1.51', 2],
      ['long', '-1.51', -2],
      ['long', 0.0001, 0],
      ['long', -0.0001, 0],
      ['long', 0, 0],
      ['long', -0, 0],
      ['long', '1L', 1],
      ['long', '9223372036854775L', 9223372036854775],
      ['long', '0L', 0],
      ['long', '-223372036854775L', -223372036854775],

      ['float', null, null],
      ['float', 1, 1],
      ['float', 0, 0],
      ['float', -0, 0],
      ['float', '1234.567', 1234.567],
      ['float', '1234,567', 1234],
      ['float', 1234.567, 1234.567],
      // ----------------------57|
      ['float', 1234.56789012345678901234567890, 1234.56787109375],
      ['float', 123456.789012345678901234567890, 123456.7890625],
      ['float', 1234567.89012345678901234567890, 1234567.875],
      ['float', 12345678.9012345678901234567890, 12345679],
      ['float', 123456789.012345678901234567890, 123456792],
      ['float', 1234567890.12345678901234567890, 1234567936],
      ['float', 12345678901.2345678901234567890, 12345678848],
      ['float', 123456789012.345678901234567890, 123456790528],
      ['float', 1234567890123.45678901234567890, 1234567954432],
      ['float', 12345678901234.5678901234567890, 12345679020032],
      ['float', 123456789012345.678901234567890, 123456788103168],
      ['float', 1234567890123456.78901234567890, 1234567948140544],
      ['float', 12345678901234567.8901234567890, 12345678407663616],
      ['float', 123456789012345678.901234567890, 123456790519087100],
      ['float', 1234567890123456789.01234567890, 1234567939550609400],
      ['float', 12345678901234567890.1234567890, 12345679395506094000],
      ['float', 123456789012345678901.234567890, 123456789557014430000],
      ['float', 1234567890123456789012.34567890, 1.2345678252014e+21],
      ['float', 12345678901234567890123.4567890, 1.2345679377913908e+22],
      ['float', -1234.56789012345678901234567890, -1234.56787109375],
      ['float', -123456.789012345678901234567890, -123456.7890625],
      ['float', -1234567.89012345678901234567890, -1234567.875],
      ['float', -12345678.9012345678901234567890, -12345679],
      ['float', -123456789.012345678901234567890, -123456792],
      ['float', -1234567890.12345678901234567890, -1234567936],
      ['float', -12345678901.2345678901234567890, -12345678848],
      ['float', -123456789012.345678901234567890, -123456790528],
      ['float', -1234567890123.45678901234567890, -1234567954432],
      ['float', -12345678901234.5678901234567890, -12345679020032],
      ['float', -123456789012345.678901234567890, -123456788103168],
      ['float', -1234567890123456.78901234567890, -1234567948140544],
      ['float', -12345678901234567.8901234567890, -12345678407663616],
      ['float', -123456789012345678.901234567890, -123456790519087100],
      ['float', -1234567890123456789.01234567890, -1234567939550609400],
      ['float', -12345678901234567890.1234567890, -12345679395506094000],
      ['float', -123456789012345678901.234567890, -123456789557014430000],
      ['float', -1234567890123456789012.34567890, -1.2345678252014e+21],
      ['float', -12345678901234567890123.4567890, -1.2345679377913908e+22],
      ['float', '1f', 1],
      ['float', '1234.567F', 1234.567],
      ['float', '1234.567f', 1234.567],
      ['float', '1234.5678f', 1234.5677490234375],
      ['float', '1234.56781f', 1234.5677490234375],
      ['float', '1234.56789f', 1234.56787109375],
      ['float', '1234567.890123456f', 1234567.875],
      ['float', '1234567.8f', 1234567.75],
      ['float', '123456.7f', 123456.7],
      ['float', '123.4567f', 123.4567],

      ['double', null, null],
      ['double', 1, 1],
      ['double', 0, 0],
      ['double', -0, 0],
      ['double', '1234.567', 1234.567],
      ['double', '1234,567', 1234],
      ['double', 1234.567, 1234.567],
      ['double', 1234.56789012345678901234567890, 1234.567890123457],
      ['double', 123456.789012345678901234567890, 123456.78901234567],
      ['double', 1234567.89012345678901234567890, 1234567.8901234567],
      ['double', 12345678.9012345678901234567890, 12345678.901234567],
      ['double', 123456789.012345678901234567890, 123456789.01234567],
      ['double', 1234567890.12345678901234567890, 1234567890.1234567],
      ['double', 12345678901.2345678901234567890, 12345678901.234568],
      ['double', 123456789012.345678901234567890, 123456789012.34567],
      ['double', 1234567890123.45678901234567890, 1234567890123.4568],
      ['double', 12345678901234.5678901234567890, 12345678901234.568],
      ['double', 123456789012345.678901234567890, 123456789012345.67],
      ['double', 1234567890123456.78901234567890, 1234567890123456.8],
      ['double', 12345678901234567.8901234567890, 12345678901234568],
      ['double', 123456789012345678.901234567890, 123456789012345680],
      ['double', 1234567890123456789.01234567890, 1234567890123456800],
      ['double', 12345678901234567890.1234567890, 12345678901234567000],
      ['double', 123456789012345678901.234567890, 123456789012345680000],
      ['double', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['double', 12345678901234567890123.4567890, 1.2345678901234568e+22],
      ['double', '1d', 1],
      ['double', '1234.567D', 1234.567],
      ['double', '1234.567d', 1234.567],
      ['double', '1234.5678901234567d', 1234.5678901234567],
      ['double', '123456.78901234567890d', 123456.78901234567],
      ['double', '123456.789012345678901234567890d', 123456.78901234567],
      ['double', '1234.56781d', 1234.56781],
      ['double', '123456789d', 123456789],

      ['money', null, null],
      ['money', 1, 1],
      ['money', 0, 0],
      ['money', -0, 0],
      ['money', '1234.567', 1234.567],
      ['money', '$1234.567', ERROR_CONVERT_TO_NUMBER],
      ['money', '1234,567', 1234],
      ['money', 1234.567, 1234.567],
      ['money', 1234.56789012345678901234567890, 1234.567890123457],
      ['money', 123456.789012345678901234567890, 123456.78901234567],
      ['money', 1234567.89012345678901234567890, 1234567.8901234567],
      ['money', 12345678.9012345678901234567890, 12345678.901234567],
      ['money', 123456789.012345678901234567890, 123456789.01234567],
      ['money', 1234567890.12345678901234567890, 1234567890.1234567],
      ['money', 12345678901.2345678901234567890, 12345678901.234568],
      ['money', 123456789012.345678901234567890, 123456789012.34567],
      ['money', 1234567890123.45678901234567890, 1234567890123.4568],
      ['money', 12345678901234.5678901234567890, 12345678901234.568],
      ['money', 123456789012345.678901234567890, 123456789012345.67],
      ['money', 1234567890123456.78901234567890, 1234567890123456.8],
      ['money', 12345678901234567.8901234567890, 12345678901234568],
      ['money', 123456789012345678.901234567890, 123456789012345680],
      ['money', 1234567890123456789.01234567890, 1234567890123456800],
      ['money', 12345678901234567890.1234567890, 12345678901234567000],
      ['money', 123456789012345678901.234567890, 123456789012345680000],
      ['money', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['money', 12345678901234567890123.4567890, 1.2345678901234568e+22],

      ['bool', null, null],
      ['bool', 'true', true],
      ['bool', 'false', false],
      ['bool', true, true],
      ['bool', false, false],
      ['bool', -1, true],
      ['bool', 1, true],
      ['bool', 0, false],
      ['bool', '333', ERROR_BOOLEAN_STR],
      ['bool', '', ERROR_BOOLEAN_STR],
      ['bool', { a: 1 }, ERROR_BOOLEAN_NUM],
      ['bool', [1, 2], ERROR_BOOLEAN_NUM],
      ['bool', 4567, ERROR_BOOLEAN_NUM2]
    ];
    cases.forEach(([schemaDataType, value, expected], index) => {
      if (index < fromIndex) {
        return;
      }
      test(`[${index}]  type: "${schemaDataType}", value: "${
        JSON.stringify(value).substr(0, 30)}"${
        typeof expected === 'object' && expected instanceof RegExp ? ' -> ERROR' : ''}`, () => {
        schemaItemStub.type = schemaDataType;
        const { validator } = csu.types[schemaDataType] || {};
        const error = {};
        const normalized = validator(value, schemaItemStub, error);
        if (error.reason) {
          if (typeof expected === 'object' && expected instanceof RegExp) {
            expect(error.reason).match(expected);
          } else {
            expect(error.reason).eql(expected);
          }
        } else {
          expect(normalized).eql(expected);
        }
      });
    });
  });
  describe('Method validator() of numeric types with precision = 2...', () => {
    const schemaItemStub = { path: 'stab.path', precision: 2 };
    const cases = [
      ['number', null, null],
      ['number', 123, 123],
      ['number', 123.567, 123.57],
      ['number', '123', 123],
      ['number', '123.456', 123.46],
      ['number', '123,456', 123],
      ['number', '123ttttt', 123],
      ['number', 'ttttt', ERROR_CONVERT_TO_NUMBER],
      ['number', { a: 1 }, ERROR_TYPE_TO_NUMBER],
      ['number', true, ERROR_TYPE_TO_NUMBER],
      ['number', false, ERROR_TYPE_TO_NUMBER],
      ['number', [12345], ERROR_TYPE_TO_NUMBER],
      ['number', 1234567890123456789012345678901234567890, 1.2345678901234568e+39],
      ['number', -1234567890123456789012345678901234567890, -1.2345678901234568e+39],
      ['number', 123456789012345678901234567890123456789012345678901234567890, 1.2345678901234568e+59],
      ['number', -12345678901234567890123456789012345678901234567890123456780, -1.2345678901234568e+58],
      ['number', '123456789012345678901234567890123456789012345678901234567890', 1.2345678901234568e+59],
      ['number', '-12345678901234567890123456789012345678901234567890123456780', -1.2345678901234568e+58],
      ['number', 12345678901234.5678901234567890123456789012345678901234567890, 12345678901234.57],
      ['number', -12345678901234.567890123456789012345678901234567890123456780, -12345678901234.57],
      ['number', 123456789012345678901234.567890123456789012345678901234567890, 1.2345678901234569e+23],
      ['number', -123456789012345678901234.56789012345678901234567890123456780, -1.2345678901234569e+23],
      ['number', 0, 0],
      ['number', -0, 0],

      ['float', null, null],
      ['float', 1, 1],
      ['float', 0, 0],
      ['float', -0, 0],
      ['float', '1234.567', 1234.57],
      ['float', '1234,567', 1234],
      ['float', 1234.567, 1234.57],
      ['float', 1234.56789012345678901234567890, 1234.57],
      ['float', 123456.789012345678901234567890, 123456.79],
      ['float', 1234567.89012345678901234567890, 1234567.88],
      ['float', 12345678.9012345678901234567890, 12345679],
      ['float', 123456789.012345678901234567890, 123456792],
      ['float', 1234567890.12345678901234567890, 1234567936],
      ['float', 12345678901.2345678901234567890, 12345678848],
      ['float', 123456789012.345678901234567890, 123456790528],
      ['float', 1234567890123.45678901234567890, 1234567954432],
      ['float', 12345678901234.5678901234567890, 12345679020032],
      ['float', 123456789012345.678901234567890, 123456788103168],
      ['float', 1234567890123456.78901234567890, 1234567948140544],
      ['float', 12345678901234567.8901234567890, 12345678407663616],
      ['float', 123456789012345678.901234567890, 123456790519087100],
      ['float', 1234567890123456789.01234567890, 1234567939550609400],
      ['float', 12345678901234567890.1234567890, 12345679395506094000],
      ['float', 123456789012345678901.234567890, 123456789557014430000],
      ['float', 1234567890123456789012.34567890, 1.2345678252014e+21],
      ['float', 12345678901234567890123.4567890, 1.2345679377913908e+22],
      ['float', '1234.567F', 1234.57],
      ['float', '1234.567f', 1234.57],
      ['float', '1f', 1],
      ['float', '1234.56789f', 1234.57],
      ['float', '1234567.890123456f', 1234567.88],

      ['double', null, null],
      ['double', 1, 1],
      ['double', 0, 0],
      ['double', -0, 0],
      ['double', '1234.567', 1234.57],
      ['double', '1234,567', 1234],
      ['double', 1234.567, 1234.57],
      ['double', 1234.56789012345678901234567890, 1234.57],
      ['double', 123456.789012345678901234567890, 123456.79],
      ['double', 1234567.89012345678901234567890, 1234567.89],
      ['double', 12345678.9012345678901234567890, 12345678.9],
      ['double', 123456789.012345678901234567890, 123456789.01],
      ['double', 1234567890.12345678901234567890, 1234567890.12],
      ['double', 12345678901.2345678901234567890, 12345678901.23],
      ['double', 123456789012.345678901234567890, 123456789012.35],
      ['double', 1234567890123.45678901234567890, 1234567890123.46],
      ['double', 12345678901234.5678901234567890, 12345678901234.57],
      ['double', 123456789012345.678901234567890, 123456789012345.67],
      ['double', 1234567890123456.78901234567890, 1234567890123456.8],
      ['double', 12345678901234567.8901234567890, 12345678901234568],
      ['double', 123456789012345678.901234567890, 123456789012345680],
      ['double', 1234567890123456789.01234567890, 1234567890123456800],
      ['double', 12345678901234567890.1234567890, 12345678901234567000],
      ['double', 123456789012345678901.234567890, 123456789012345680000],
      ['double', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['double', 12345678901234567890123.4567890, 1.2345678901234568e+22],

      ['money', null, null],
      ['money', 1, 1],
      ['money', 0, 0],
      ['money', -0, 0],
      ['money', '1234.567', 1234.57],
      ['money', '$1234.567', ERROR_CONVERT_TO_NUMBER],
      ['money', '1234,567', 1234],
      ['money', 1234.567, 1234.57],
      ['money', 1234.56789012345678901234567890, 1234.57],
      ['money', 123456.789012345678901234567890, 123456.79],
      ['money', 1234567.89012345678901234567890, 1234567.89],
      ['money', 12345678.9012345678901234567890, 12345678.9],
      ['money', 123456789.012345678901234567890, 123456789.01],
      ['money', 1234567890.12345678901234567890, 1234567890.12],
      ['money', 12345678901.2345678901234567890, 12345678901.23],
      ['money', 123456789012.345678901234567890, 123456789012.35],
      ['money', 1234567890123.45678901234567890, 1234567890123.46],
      ['money', 12345678901234.5678901234567890, 12345678901234.57],
      ['money', 123456789012345.678901234567890, 123456789012345.67],
      ['money', 1234567890123456.78901234567890, 1234567890123456.8],
      ['money', 12345678901234567.8901234567890, 12345678901234568],
      ['money', 123456789012345678.901234567890, 123456789012345680],
      ['money', 1234567890123456789.01234567890, 1234567890123456800],
      ['money', 12345678901234567890.1234567890, 12345678901234567000],
      ['money', 123456789012345678901.234567890, 123456789012345680000],
      ['money', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['money', 12345678901234567890123.4567890, 1.2345678901234568e+22]
    ];
    cases.forEach(([schemaDataType, value, expected], index) => {
      if (index < fromIndex) {
        return;
      }
      test(`[${index}]  type: "${schemaDataType}", value: "${
        JSON.stringify(value).substr(0, 30)}"${
        typeof expected === 'object' && expected instanceof RegExp ? ' -> ERROR' : ''}`, () => {
        schemaItemStub.type = schemaDataType;
        const { validator } = csu.types[schemaDataType] || {};
        const error = {};
        const normalized = validator(value, schemaItemStub, error);
        if (error.reason) {
          if (typeof expected === 'object' && expected instanceof RegExp) {
            expect(error.reason).match(expected);
          } else {
            expect(error.reason).eql(expected);
          }
        } else {
          expect(normalized).eql(expected);
        }
      });
    });
  });
  describe('Method validator() of numeric types with precision = 0...', () => {
    const schemaItemStub = { path: 'stab.path', precision: 0 };
    const cases = [
      ['number', null, null],
      ['number', 123, 123],
      ['number', 123.567, 124],
      ['number', '123', 123],
      ['number', '123.456', 123],
      ['number', '123,456', 123],
      ['number', '123ttttt', 123],
      ['number', 'ttttt', ERROR_CONVERT_TO_NUMBER],
      ['number', { a: 1 }, ERROR_TYPE_TO_NUMBER],
      ['number', true, ERROR_TYPE_TO_NUMBER],
      ['number', false, ERROR_TYPE_TO_NUMBER],
      ['number', [12345], ERROR_TYPE_TO_NUMBER],
      ['number', 1234567890123456789012345678901234567890, 1.2345678901234568e+39],
      ['number', -1234567890123456789012345678901234567890, -1.2345678901234568e+39],
      ['number', 123456789012345678901234567890123456789012345678901234567890, 1.2345678901234568e+59],
      ['number', -12345678901234567890123456789012345678901234567890123456780, -1.2345678901234568e+58],
      ['number', '123456789012345678901234567890123456789012345678901234567890', 1.2345678901234568e+59],
      ['number', '-12345678901234567890123456789012345678901234567890123456780', -1.2345678901234568e+58],
      ['number', 12345678901234.5678901234567890123456789012345678901234567890, 12345678901235],
      ['number', -12345678901234.567890123456789012345678901234567890123456780, -12345678901235],
      ['number', 123456789012345678901234.567890123456789012345678901234567890, 1.2345678901234569e+23],
      ['number', -123456789012345678901234.56789012345678901234567890123456780, -1.2345678901234569e+23],
      ['number', 0, 0],
      ['number', -0, 0],

      ['float', null, null],
      ['float', 1, 1],
      ['float', 0, 0],
      ['float', -0, 0],
      ['float', '1234.567', 1235],
      ['float', '1234,567', 1234],
      ['float', 1234.567, 1235],
      ['float', 1234.56789012345678901234567890, 1235],
      ['float', 123456.789012345678901234567890, 123457],
      ['float', 1234567.89012345678901234567890, 1234568],
      ['float', 12345678.9012345678901234567890, 12345679],
      ['float', 123456789.012345678901234567890, 123456792],
      ['float', 1234567890.12345678901234567890, 1234567936],
      ['float', 12345678901.2345678901234567890, 12345678848],
      ['float', 123456789012.345678901234567890, 123456790528],
      ['float', 1234567890123.45678901234567890, 1234567954432],
      ['float', 12345678901234.5678901234567890, 12345679020032],
      ['float', 123456789012345.678901234567890, 123456788103168],
      ['float', 1234567890123456.78901234567890, 1234567948140544],
      ['float', 12345678901234567.8901234567890, 12345678407663616],
      ['float', 123456789012345678.901234567890, 123456790519087100],
      ['float', 1234567890123456789.01234567890, 1234567939550609400],
      ['float', 12345678901234567890.1234567890, 12345679395506094000],
      ['float', 123456789012345678901.234567890, 123456789557014430000],
      ['float', 1234567890123456789012.34567890, 1.2345678252014e+21],
      ['float', 12345678901234567890123.4567890, 1.2345679377913908e+22],

      ['double', null, null],
      ['double', 1, 1],
      ['double', 0, 0],
      ['double', -0, 0],
      ['double', '1234.567', 1235],
      ['double', '1234,567', 1234],
      ['double', 1234.567, 1235],
      ['double', 1234.56789012345678901234567890, 1235],
      ['double', 123456.789012345678901234567890, 123457],
      ['double', 1234567.89012345678901234567890, 1234568],
      ['double', 12345678.9012345678901234567890, 12345679],
      ['double', 123456789.012345678901234567890, 123456789],
      ['double', 1234567890.12345678901234567890, 1234567890],
      ['double', 12345678901.2345678901234567890, 12345678901],
      ['double', 123456789012.345678901234567890, 123456789012],
      ['double', 1234567890123.45678901234567890, 1234567890123],
      ['double', 12345678901234.5678901234567890, 12345678901235],
      ['double', 123456789012345.678901234567890, 123456789012346],
      ['double', 1234567890123456.78901234567890, 1234567890123457],
      ['double', 12345678901234567.8901234567890, 12345678901234568],
      ['double', 123456789012345678.901234567890, 123456789012345680],
      ['double', 1234567890123456789.01234567890, 1234567890123456800],
      ['double', 12345678901234567890.1234567890, 12345678901234567000],
      ['double', 123456789012345678901.234567890, 123456789012345680000],
      ['double', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['double', 12345678901234567890123.4567890, 1.2345678901234568e+22],

      ['money', null, null],
      ['money', 1, 1],
      ['money', 0, 0],
      ['money', -0, 0],
      ['money', '1234.567', 1235],
      ['money', '$1234.567', ERROR_CONVERT_TO_NUMBER],
      ['money', '1234,567', 1234],
      ['money', 1234.567, 1235],
      ['money', 1234.56789012345678901234567890, 1235],
      ['money', 123456.789012345678901234567890, 123457],
      ['money', 1234567.89012345678901234567890, 1234568],
      ['money', 12345678.9012345678901234567890, 12345679],
      ['money', 123456789.012345678901234567890, 123456789],
      ['money', 1234567890.12345678901234567890, 1234567890],
      ['money', 12345678901.2345678901234567890, 12345678901],
      ['money', 123456789012.345678901234567890, 123456789012],
      ['money', 1234567890123.45678901234567890, 1234567890123],
      ['money', 12345678901234.5678901234567890, 12345678901235],
      ['money', 123456789012345.678901234567890, 123456789012346],
      ['money', 1234567890123456.78901234567890, 1234567890123457],
      ['money', 12345678901234567.8901234567890, 12345678901234568],
      ['money', 123456789012345678.901234567890, 123456789012345680],
      ['money', 1234567890123456789.01234567890, 1234567890123456800],
      ['money', 12345678901234567890.1234567890, 12345678901234567000],
      ['money', 123456789012345678901.234567890, 123456789012345680000],
      ['money', 1234567890123456789012.34567890, 1.2345678901234568e+21],
      ['money', 12345678901234567890123.4567890, 1.2345678901234568e+22]
    ];
    cases.forEach(([schemaDataType, value, expected], index) => {
      if (index < fromIndex) {
        return;
      }
      test(`[${index}]  type: "${schemaDataType}", value: "${
        JSON.stringify(value).substr(0, 30)}"${
        typeof expected === 'object' && expected instanceof RegExp ? ' -> ERROR' : ''}`, () => {
        schemaItemStub.type = schemaDataType;
        const { validator } = csu.types[schemaDataType] || {};
        const error = {};
        const normalized = validator(value, schemaItemStub, error);
        if (error.reason) {
          if (typeof expected === 'object' && expected instanceof RegExp) {
            expect(error.reason).match(expected);
          } else {
            expect(error.reason).eql(expected);
          }
        } else {
          expect(normalized).eql(expected);
        }
      });
    });
  });
});
